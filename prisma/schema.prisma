// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

enum UserRole {
  OWNER
  ADMIN
  USER
  BANNED
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt

  posts    Post[]
  comments Comment[]
  replies  Reply[]

  userFriendships       Friendship[] @relation("userFriendships")
  friendUserFriendships Friendship[] @relation("friendUserFriendships")
  Like                  Like[]
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model InviteToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String?
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Post {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  message    String
  image      String? // New field for storing the image URL or path (optional because not every post must have an image)
  userId     String    @db.ObjectId
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments   Comment[]
  likesCount Int       @default(0)
  likes      Like[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Comment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  message    String
  postId     String   @db.ObjectId
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies    Reply[]
  likesCount Int      @default(0)
  likes      Like[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Reply {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  message    String
  commentId  String   @db.ObjectId
  comment    Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  likesCount Int      @default(0)
  likes      Like[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Like {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  Post       Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String?  @db.ObjectId
  Comment    Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId  String?  @db.ObjectId
  Reply      Reply?   @relation(fields: [replyId], references: [id], onDelete: Cascade)
  replyId    String?  @db.ObjectId
}

model Friendship {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String @db.ObjectId
  receiverId String @db.ObjectId

  user   User @relation(name: "userFriendships", fields: [senderId], references: [id], onDelete: Cascade)
  friend User @relation(name: "friendUserFriendships", fields: [receiverId], references: [id], onDelete: Cascade)

  status    FriendshipStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@unique([senderId, receiverId])
  @@index([receiverId])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}
